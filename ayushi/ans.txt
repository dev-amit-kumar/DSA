bin
The bin() function returns the binary version of a specified integer.
The result will always start with the prefix 0b.
Eg 
x = bin(36)
print(x)

Output
0b100100

float
The float() function converts the specified value into a floating point number.
Eg
x = float(3)
print(x)

Output
3.0

map
The map() function executes a specified function for each item in an iterable. The item is sent to the function as a parameter.

Eg
def myfunc(a):
  return len(a)

x = map(myfunc, ('apple', 'banana', 'cherry'))

print(list(x))

Output
[5, 6, 6]


filter
The filter() function returns an iterator where the items are filtered through a function to test if the item is accepted or not.

Eg
ages = [5, 12, 17, 18, 24, 32]

def myFunc(x):
  if x < 18:
    return False
  else:
    return True

adults = filter(myFunc, ages)

for x in adults:
  print(x)

Output
18
24
32

format
The format() method formats the specified value(s) and insert them inside the string's placeholder.
The placeholder is defined using curly brackets: {}. Read more about the placeholders in the Placeholder section below.
The format() method returns the formatted string.

Eg
#named indexes:
txt1 = "My name is {fname}, I'm {age}".format(fname = "John", age = 36)
#numbered indexes:
txt2 = "My name is {0}, I'm {1}".format("John",36)
#empty placeholders:
txt3 = "My name is {}, I'm {}".format("John",36)

print(txt1)
print(txt2)
print(txt3)

Output
My name is John, I'm 36
My name is John, I'm 36
My name is John, I'm 36

len
len() function is an inbuilt function in Python. It can be used to find the length of an object. 

Eg
list1 = ['happy', 'new', 'year', 2023]
# printing length of list1
print(len(list1))
 
tuple1 = (1,2,3,4)
# printing length of tuple1
print(len(tuple1))
 
string1 = "abcdefghi"
# printing length of string1
print(len(string1))

Output:
4
4
9

max
Python max() function returns the largest item in an iterable or the largest of two or more arguments.

Eg
var1 = 4
var2 = 8
var3 = 2
 
max_val = max(var1, var2, var3)
print(max_val)

Output : 
8

min
Python min() function returns the smallest of the values or the smallest item in an iterable passed as its parameter.

Eg
var1 = 4
var2 = 8
var3 = 2
 
min_val = min(var1, var2, var3)
print(min_val)

Output : 
2

next
Pythonâ€™s next() function returns the next item of an iterator.

Eg
mylist = iter(["apple", "banana", "cherry"])
x = next(mylist)
print(x)
x = next(mylist)
print(x)
x = next(mylist)
print(x)

Output :
apple
banana
cherry

range
The Python range() function returns a sequence of numbers, in a given range. The most common use of it is to iterate sequences on a sequence of numbers using Python loops.

Eg
for i in range(5):
    print(i, end=" ")

Output:
0 1 2 3 4 

round
Python round() function is a built-in function available with Python. It will return you a float number that will be rounded to the decimal places which are given as input. If the decimal places to be rounded are not specified, it is considered as 0, and it will round to the nearest integer.

Eg
number = 111.23
rounded_number = round(number)
print(rounded_number)

Output :
111

sorted
Python sorted() function returns a sorted list. It is not only defined for the list, it accepts any iterable.

Eg
nums = [4, 1, 3, 2]
print(sorted(nums))

Output :
[1, 2, 3, 4]

tuple
Python Tuple is a collection of objects separated by commas. In some ways, a tuple is similar to a Python list in terms of indexing, nested objects, and repetition but the main difference between both is Python tuple is immutable, unlike the Python list which is mutable.

Eg
var = ("a", "b", "c")
print(var)

Output:
("a", "b", "c")

list
Python Lists are just like dynamically sized arrays. 
In simple language, a list is a collection of things, enclosed in [ ] and separated by commas. 
Lists are used to store multiple items in a single variable.

Eg
new_list = ["a", "b", "c"]
print(new_list)

Output:
["a", "b", "c"]

sum
Python provides an inbuilt function sum() which sums up the numbers in the list. 

Eg
a = (1, 2, 3, 4, 5)
x = sum(a)

Output:
15

type
The type() function returns the type of the specified object

Eg
a = ('apple', 'banana', 'cherry')
b = "Hello World"
c = 33

x = type(a)
y = type(b)
z = type(c)

Output:
<class 'tuple'>
<class 'str'>
<class 'int'>

set
A Set in Python programming is an unordered collection data type that is iterable, mutable and has no duplicate elements. 

Eg
Days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"}    
print(Days)    
print(type(Days))    

Output:
{'Friday', 'Tuesday', 'Monday', 'Saturday', 'Thursday', 'Sunday', 'Wednesday'}
<class 'set'>

print
The print() function prints the specified message to the screen, or other standard output device.

Eg
print("Hello World")

Output
Hello World

int
Python int() function returns an integer from a given object or converts a number in a given base to a decimal.

Eg
x = int(3.5)
print(x)

Output:
3

help
The Python help function is used to display the documentation of modules, functions, classes, keywords, etc. 

Eg
help('print')

Output:
Help on built-in function print in module builtins:

print(...)
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep: string inserted between values, default a space.
end: string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.

bool
Python bool() function is used to return or convert a value to a Boolean value i.e., True or False, using the standard truth testing procedure. 

Eg
print(10 > 9)
print(10 == 9)
print(10 < 9)

Output:
True
False
False

dict
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

Eg
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

Output:
{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}


  [
    [1,2,3,4],
    [5,6,7,8],
    [9,10,11,12]
  ]